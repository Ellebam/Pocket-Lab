# compose.yaml

x-common: &common
  restart: unless-stopped
  env_file: .env
  environment:
  - TZ=${TIMEZONE}
  networks:
  - backend

############################
#        OBSERVABILITY     #
############################
services:

  prometheus:
    <<: *common
    image: prom/prometheus:${PROMETHEUS_VERSION}
    container_name: prometheus
    volumes:
    - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
    - prometheus-data:/prometheus
    expose:
    - "9090"
    labels:
    - traefik.enable=true
    - traefik.http.routers.prometheus.rule=Host(`prometheus.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.prometheus.entrypoints=websecure
    - traefik.http.routers.prometheus.tls.certresolver=le-dns
    - traefik.http.routers.prometheus.middlewares=auth@docker
    - traefik.http.services.prometheus.loadbalancer.server.port=9090

  loki:
    <<: *common
    image: grafana/loki:${LOKI_VERSION}
    container_name: loki
    volumes:
    - ./loki/local-config.yaml:/etc/loki/local-config.yaml:ro
    - loki-data:/loki
    command:
    - -config.file=/etc/loki/local-config.yaml

  grafana:
    <<: *common
    image: grafana/grafana:${GRAFANA_VERSION}
    container_name: grafana
    volumes:
    - grafana-data:/var/lib/grafana
    expose:
    - "3000"
    environment:
    - GF_INSTALL_PLUGINS=grafana-clock-panel
    labels:
    - traefik.enable=true
    - traefik.http.routers.grafana.rule=Host(`grafana.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.grafana.entrypoints=websecure
    - traefik.http.routers.grafana.tls.certresolver=le-dns

  node-exporter:
    container_name: node-exporter
    restart: unless-stopped
    env_file: .env
    image: prom/node-exporter:${NODE_EXPORTER_VERSION}
    expose:
    - "9100"
    command:
    - --path.rootfs=/host
    volumes:
    - /:/host:ro,rslave
    environment:
    - TZ=${TIMEZONE}

  ############################
  #   NETWORK / PLATFORM     #
  ############################
  traefik:
    <<: *common
    image: traefik:${TRAEFIK_VERSION}
    container_name: traefik
    ports:
    - "80:80"
    - "443:443"
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - le-data:/acme
    labels:
    ## Basic-Auth middleware through env
    - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_BASIC_AUTH}

    ## Traefik dashboard router
    - traefik.enable=true
    - traefik.http.routers.dashboard.rule=Host(`traefik.${TRAEFIK_DOMAIN}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))
    - traefik.http.routers.dashboard.entrypoints=websecure
    - traefik.http.routers.dashboard.middlewares=auth@docker
    - traefik.http.routers.dashboard.tls.certresolver=le-dns
    - traefik.http.routers.dashboard.service=api@internal
    ## Bootstrap router â€“ never exposed
    - traefik.http.routers.le-bootstrap.rule=Host(`boot.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.le-bootstrap.entrypoints=websecure
    - traefik.http.routers.le-bootstrap.tls=true
    - traefik.http.routers.le-bootstrap.tls.certresolver=le-dns
    - traefik.http.routers.le-bootstrap.tls.domains[0].main=${TRAEFIK_DOMAIN}
    - traefik.http.routers.le-bootstrap.tls.domains[0].sans=*.${TRAEFIK_DOMAIN}

    command:
    - --providers.docker.exposedbydefault=false
    - --api.dashboard=true
    - --entrypoints.web.address=:80
    - --entrypoints.websecure.address=:443
    - --certificatesresolvers.le-dns.acme.storage=/acme/acme.json
    - --certificatesresolvers.le-dns.acme.email=${TRAEFIK_LE_EMAIL}
    - --certificatesresolvers.le-dns.acme.dnschallenge.provider=cloudflare
    - --certificatesresolvers.le-dns.acme.dnschallenge.delaybeforecheck=0
    - --log.level=DEBUG
    - --accesslog=true
    - --global.sendanonymoususage=false
    - --global.checknewversion=false

  tailscale:
    image: tailscale/tailscale:latest
    container_name: tailscale
    restart: unless-stopped
    env_file: .env
    network_mode: host
    privileged: true
    volumes:
      - tailscale-state:/var/lib/tailscale
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - TZ=${TIMEZONE}
      - TS_ROUTES=${DOCKER_BRIDGE_SUBNET}
      - TS_EXTRA_ARGS=--ssh --accept-routes --accept-dns=false --hostname=pocket-lab

  smtp:
    <<: *common
    image: ${SMTP_IMAGE}
    container_name: ${SMTP_HOST}
    # accept mail from stack containers only
    environment:
      - ALLOWED_SENDER_DOMAINS=${TRAEFIK_DOMAIN}
      - POSTFIX_myhostname=${SMTP_HOST}.${TRAEFIK_DOMAIN}
      - POSTFIX_mynetworks=127.0.0.0/8 ${DOCKER_BRIDGE_SUBNET}
      - POSTFIX_smtp_tls_security_level=may
    expose:
      - "${SMTP_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "echo x | nc -w 2 localhost ${SMTP_PORT}"]
      interval: 30s
      retries: 3

  portainer:
    <<: *common
    image: portainer/portainer-ce:${PORTAINER_VERSION}
    container_name: portainer
    expose:
    - ${PORTAINER_PORT}
    volumes:
    - portainer-data:/data
    - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
    - traefik.enable=true
    - traefik.http.routers.portainer.rule=Host(`portainer.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.portainer.entrypoints=websecure
    - traefik.http.routers.portainer.tls.certresolver=le-dns
    - traefik.http.routers.portainer.middlewares=auth@docker
    - traefik.http.services.portainer.loadbalancer.server.port=${PORTAINER_PORT}
    - traefik.http.services.portainer.loadbalancer.server.scheme=http

  ############################
  #            APPS          #
  ############################
  n8n-bootstrap:
    <<: *common
    image: n8nio/n8n:${N8N_VERSION}
    container_name: n8n-bootstrap
    restart: 'no'
    depends_on:
      smtp: { condition: service_healthy }
    user: "1000:1000"             # run as the normal node user
    volumes:
      - n8n-data:/home/node/.n8n
      - ./n8n/initial_admin_setup.sh:/home/node/.n8n/init.sh:ro
    entrypoint: []
    command: ["sh", "-c", "/home/node/.n8n/init.sh"]

  n8n:
    <<: *common
    image: n8nio/n8n:${N8N_VERSION}
    container_name: n8n
    depends_on:
      n8n-bootstrap:
        condition: service_completed_successfully
    user: "1000:1000"             # run as the normal node user
    environment:
      - NODE_ENV=production
      - GENERIC_TIMEZONE=${TIMEZONE}
    restart: on-failure
    expose:
    - "5678"
    volumes:
    - n8n-data:/home/node/.n8n
    labels:
    - traefik.enable=true
    - traefik.http.routers.n8n.rule=Host(`n8n.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.n8n.entrypoints=websecure
    - traefik.http.routers.n8n.tls.certresolver=le-dns
    - traefik.http.routers.n8n.tls=true

  ollama-bootstrap:
    image: ollama/ollama:${OLLAMA_VERSION}
    container_name: ollama-bootstrap
    entrypoint: ["/bin/sh","-c","/bootstrap/ollama-bootstrap.sh"]
    volumes:
      - ollama-data:/root/.ollama
      - ./ollama/ollama-bootstrap.sh:/bootstrap/ollama-bootstrap.sh:ro
    environment:
      - OLLAMA_MODELS=/root/.ollama/models
    networks: [ backend ]
    restart: "no"
  ollama:
    <<: *common
    image: ollama/ollama:${OLLAMA_VERSION}
    environment:
      - OLLAMA_MODELS=/root/.ollama/models
    container_name: ollama
    depends_on:
      ollama-bootstrap:
        condition: service_completed_successfully
    expose:
    - "11434"
    volumes:
    - ollama-data:/root/.ollama
    labels:
    - traefik.enable=true
    - traefik.http.routers.ollama.rule=Host(`ollama.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.ollama.entrypoints=websecure
    - traefik.http.routers.ollama.tls.certresolver=le-dns
    - traefik.http.routers.ollama.middlewares=auth@docker


  openwebui-bootstrap:
    <<: *common
    image: ghcr.io/open-webui/open-webui:${OPENWEBUI_VERSION}
    container_name: openwebui-bootstrap
    restart: "no"
    user: "0:0"
    volumes:
      - openwebui-data:/app/backend/data
      - ./openwebui/create_admin.py:/app/backend/create_admin.py:ro
    entrypoint: []
    command: ["python3", "/app/backend/create_admin.py"]
  openwebui:
    <<: *common
    image: ghcr.io/open-webui/open-webui:${OPENWEBUI_VERSION}
    container_name: openwebui
    volumes:
      - openwebui-data:/app/backend/data
    expose:
    - "8080"
    depends_on:
      openwebui-bootstrap:
        condition: service_completed_successfully
    labels:
    - traefik.enable=true
    - traefik.http.routers.webui.rule=Host(`chat.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.webui.entrypoints=websecure
    - traefik.http.routers.webui.tls.certresolver=le-dns
    - traefik.http.services.openwebui.loadbalancer.server.port=${OPENWEBUI_PORT}
    - traefik.http.services.openwebui.loadbalancer.server.scheme=http

  # --------------------------- WEB SEARCH ---------------------------
  searxng:
    <<: *common
    image: searxng/searxng:latest
    container_name: searxng
    expose:
      - "8080"
    volumes:
      - ./searxng/settings.yml:/etc/searxng/settings.yml:ro
    # intentionally no Traefik labels: internal use only
    networks: [ backend ]

  ############################
  #     DATA / RAG STACK     #
  ############################
  elasticsearch:
    <<: *common
    image: elasticsearch:${ES_VERSION}
    container_name: es01
    volumes:
    - esdata01:/usr/share/elasticsearch/data
    expose:
    - "${ES_PORT}"
    environment:
    - node.name=es01
    - discovery.type=single-node
    - xpack.security.enabled=true
    - xpack.security.http.ssl.enabled=false
    - xpack.security.transport.ssl.enabled=false
    - ELASTIC_PASSWORD=${ES_PASSWORD}
    - bootstrap.memory_lock=false
    - ES_JAVA_OPTS=-Xms2g -Xmx2g
    - cluster.routing.allocation.disk.watermark.low=5gb
    - cluster.routing.allocation.disk.watermark.high=3gb
    - cluster.routing.allocation.disk.watermark.flood_stage=2gb
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
      - CMD-SHELL
      - curl -s http://localhost:${ES_PORT}>/dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 120

  infinity:
    <<: *common
    image: infiniflow/infinity:${INFINITY_VERSION}
    container_name: infinity
    volumes:
    - infinity_data:/var/infinity
    - ./ragflow/infinity_conf.toml:/infinity_conf.toml:ro
    command:
    - -f
    - /infinity_conf.toml
    expose:
    - "${INFINITY_THRIFT_PORT}"
    - "${INFINITY_HTTP_PORT}"
    - "${INFINITY_PSQL_PORT}"
    ulimits:
      nofile: { soft: 500000, hard: 500000 }
    healthcheck:
      test: [ "CMD", "curl", "-s", "http://localhost:23820/admin/node/current" ]
      interval: 10s
      timeout: 10s
      retries: 120

  mysql:
    <<: *common
    image: mysql:${MYSQL_VERSION}
    container_name: ${MYSQL_HOST}
    command:
    - --max_connections=1000
    - --character-set-server=utf8mb4
    - --collation-server=utf8mb4_unicode_ci
    - --default-authentication-plugin=mysql_native_password
    - --tls_version=TLSv1.2,TLSv1.3
    - --binlog_expire_logs_seconds=604800
    expose:
    - "${MYSQL_PORT}"
    volumes:
    - mysql_data:/var/lib/mysql
    environment:
    - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-uroot", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 15s
      timeout: 8s
      retries: 5

  minio-bootstrap:
    <<: *common
    image: quay.io/minio/mc:latest
    container_name: minio-bootstrap
    depends_on:
      minio:
        condition: service_started
    entrypoint: []
    command: ["sh", "-c", "mc alias set local http://minio:$${MINIO_PORT} $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD} && mc mb --ignore-existing local/$${NCA_S3_BUCKET}"]
    restart: "no"

  minio:
    <<: *common
    restart: on-failure
    image: quay.io/minio/minio:${MINIO_VERSION}
    container_name: minio
    command:
    - server
    - --console-address
    - ":${MINIO_CONSOLE_PORT}"
    - /data
    expose:
    - "${MINIO_PORT}"
    - "${MINIO_CONSOLE_PORT}"
    volumes:
    - minio_data:/data
    environment:
    - MINIO_ROOT_USER=${MINIO_ROOT_USER}
    - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    - MINIO_SERVER_URL=http://minio:${MINIO_PORT}
    - MINIO_BROWSER_REDIRECT_URL=https://minio.${TRAEFIK_DOMAIN}


    labels:
    - traefik.enable=true

    - traefik.http.routers.minio-api.rule=Host(`minio.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.minio-api.entrypoints=websecure
    - traefik.http.routers.minio-api.tls.certresolver=le-dns
    - traefik.http.routers.minio-api.service=minio-api
    - traefik.http.services.minio-api.loadbalancer.server.port=${MINIO_PORT}
    - traefik.http.services.minio-api.loadbalancer.server.scheme=http

    - traefik.http.routers.minio.rule=Host(`minio.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.minio.entrypoints=websecure
    - traefik.http.routers.minio.tls.certresolver=le-dns
    - traefik.http.routers.minio.service=minio-console
    - traefik.http.services.minio-console.loadbalancer.server.port=${MINIO_CONSOLE_PORT}
    - traefik.http.services.minio-console.loadbalancer.server.scheme=http
  valkey:
    <<: *common
    image: valkey/valkey:${REDIS_VERSION}
    container_name: redis
    restart: on-failure
    command:
    - redis-server
    - --requirepass
    - ${REDIS_PASSWORD}
    - --maxmemory
    - 128mb
    - --maxmemory-policy
    - allkeys-lru
    expose:
    - "${REDIS_PORT}"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
    - redis_data:/data

  ragflow:
    <<: *common
    image: infiniflow/ragflow:${RAGFLOW_VERSION}
    container_name: ragflow-server
    depends_on:
      elasticsearch: { condition: service_started }
      infinity: { condition: service_started }
      mysql: { condition: service_healthy }
      valkey: { condition: service_healthy}
    expose:
    - "${SVR_HTTP_PORT}"
    - "9382" # MCP port 
    volumes:
    - ${RAGFLOW_LOG_DIR}:/ragflow/logs
    - ${RAGFLOW_HISTORY_DIR}:/ragflow/history_data_agent
    - ./ragflow/service_conf.yaml.template:/ragflow/conf/service_conf.yaml.template:ro
    - ./ragflow/entrypoint.sh:/ragflow/entrypoint.sh:ro
    - ./ragflow/create_admin.py:/ragflow/create_admin.py:ro
    - ./ragflow/nginx/ragflow.conf:/etc/nginx/conf.d/ragflow.conf
    - ./ragflow/nginx/proxy.conf:/etc/nginx/proxy.conf
    - ./ragflow/nginx/nginx.conf:/etc/nginx/nginx.conf
    extra_hosts:
    - "host.docker.internal:host-gateway"
    restart: on-failure
    labels:
    - traefik.enable=true
    - traefik.http.routers.ragflow.rule=Host(`ragflow.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.ragflow.entrypoints=websecure
    - traefik.http.routers.ragflow.tls.certresolver=le-dns
    - traefik.http.routers.ragflow.service=ragflow-service
    - traefik.http.services.ragflow-service.loadbalancer.server.port=80

  ############################
  # NO-CODE ARCHITECTS TOOLKIT
  ############################
  ncat:
    <<: *common
    image: stephengpope/no-code-architects-toolkit:${NCA_VERSION}
    container_name: ncat
    depends_on:
      minio-bootstrap:
        condition: service_completed_successfully
    environment:
      - APP_NAME=PocketLab
      - APP_URL=http://ncat:8080
      - API_KEY=${NCA_API_KEY}
      - S3_ENDPOINT=${NCA_S3_ENDPOINT}
      - S3_BUCKET=${NCA_S3_BUCKET}
      - S3_ACCESS_KEY=${NCA_S3_ACCESS_KEY}
      - S3_SECRET_KEY=${NCA_S3_SECRET_KEY}
    volumes:
    - ncat-storage:/var/www/html/storage/app
    - ncat-logs:/var/www/html/storage/logs
    expose:
    - "8080"

  ############################
  #         UTILITY          #
  ############################
  debug:
    image: nicolaka/netshoot:latest
    command: ["sleep", "infinity"]
    networks: [backend]


############################
#         VOLUMES          #
############################
volumes:
  grafana-data:
  loki-data:
  prometheus-data:
  portainer-data:
  n8n-data:
  ollama-data:
  esdata01:
  infinity_data:
  mysql_data:
  minio_data:
  redis_data:
  ragflow-logs:
  ragflow-history:
  le-data:
  openwebui-data:
  tailscale-state:
  ncat-storage:
  ncat-logs:

    ############################
    #         NETWORKS         #
    ############################
networks:
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_BRIDGE_SUBNET}
