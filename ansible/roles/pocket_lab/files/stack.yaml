# stack.yaml

x-common: &common
  restart: unless-stopped
  env_file: .env
  environment:
  - TZ=${TIMEZONE}
  networks:
  - backend

############################
#        OBSERVABILITY     #
############################
services:

  prometheus:
    <<: *common
    image: prom/prometheus:${PROMETHEUS_VERSION}
    volumes:
    - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
    - prometheus-data:/prometheus
    expose:
    - "9090"
    labels:
    - traefik.enable=true
    - traefik.http.routers.prometheus.rule=Host(`prometheus.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.prometheus.entrypoints=websecure
    - traefik.http.routers.prometheus.tls.certresolver=le-dns
    - traefik.http.routers.prometheus.middlewares=auth@file
    - traefik.http.services.prometheus.loadbalancer.server.port=9090

  loki:
    <<: *common
    image: grafana/loki:${LOKI_VERSION}
    volumes:
    - loki-data:/loki
    command:
    - -config.file=/etc/loki/local-config.yaml

  grafana:
    <<: *common
    image: grafana/grafana:${GRAFANA_VERSION}
    volumes:
    - grafana-data:/var/lib/grafana
    expose:
    - "3000"
    environment:
    - GF_INSTALL_PLUGINS=grafana-clock-panel
    labels:
    - traefik.enable=true
    - traefik.http.routers.grafana.rule=Host(`grafana.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.grafana.entrypoints=websecure
    - traefik.http.routers.grafana.tls.certresolver=le-dns
    - traefik.http.routers.grafana.middlewares=auth@file

  node-exporter:
    restart: unless-stopped
    env_file: .env
    image: prom/node-exporter:${NODE_EXPORTER_VERSION}
    expose:
    - "9100"
    command:
    - --path.rootfs=/host
    volumes:
    - /:/host:ro,rslave
    environment:
    - TZ=${TIMEZONE}

  ############################
  #   NETWORK / PLATFORM     #
  ############################
  traefik:
    <<: *common
    image: traefik:${TRAEFIK_VERSION}
    ports:
    - "80:80"
    - "443:443"
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - ./traefik/traefik_dynamic.yaml:/traefik_dynamic.yaml:ro
    - ./traefik/acme.json:/acme.json
    labels:
    - traefik.http.routers.dashboard.rule=Host(`traefik.${TRAEFIK_DOMAIN}`) && (PathPrefix(`/dashboard`) || PathPrefix(`/api`))
    - traefik.http.routers.dashboard.entrypoints=websecure
    - traefik.http.routers.dashboard.tls.certresolver=le-dns
    - traefik.http.routers.dashboard.service=api@internal
    - traefik.http.routers.dashboard.middlewares=auth@file
    command:
    - --providers.docker.exposedbydefault=false
    - --providers.file.filename=/traefik_dynamic.yaml
    - --api.dashboard=true
    - --entrypoints.web.address=:80
    - --entrypoints.websecure.address=:443
    - --certificatesresolvers.le-dns.acme.storage=/acme.json
    - --certificatesresolvers.le-dns.acme.email=${TRAEFIK_LE_EMAIL}
    - --certificatesresolvers.le-dns.acme.dnschallenge.provider=cloudflare
    - --certificatesresolvers.le-dns.acme.dnschallenge.delaybeforecheck=0

  twingate-1:
    restart: unless-stopped
    env_file: .env
    image: twingate/connector:${TG_CONNECTOR_VERSION}
    network_mode: host
    container_name: ${TG_CONN1_NAME}
    environment:
    - TZ=${TIMEZONE}

  twingate-2:
    restart: unless-stopped
    env_file: .env
    image: twingate/connector:${TG_CONNECTOR_VERSION}
    network_mode: host
    container_name: ${TG_CONN2_NAME}
    environment:
    - TZ=${TIMEZONE}

  portainer:
    <<: *common
    image: portainer/portainer-ce:${PORTAINER_VERSION}
    expose:
    - "9443"
    volumes:
    - portainer-data:/data
    - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
    - traefik.enable=true
    - traefik.http.routers.portainer.rule=Host(`portainer.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.portainer.entrypoints=websecure
    - traefik.http.routers.portainer.tls.certresolver=le-dns
    - traefik.http.routers.portainer.middlewares=auth@file
    - traefik.http.services.portainer.loadbalancer.server.port=9443

  ############################
  #            APPS          #
  ############################
  n8n:
    <<: *common
    image: n8nio/n8n:${N8N_VERSION}
    restart: on-failure
    expose:
    - "5678"
    volumes:
    - n8n-data:/home/node/.n8n
    labels:
    - traefik.enable=true
    - traefik.http.routers.n8n.rule=Host(`n8n.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.n8n.entrypoints=websecure
    - traefik.http.routers.n8n.tls.certresolver=le-dns
    - traefik.http.routers.n8n.middlewares=auth@file,n8n-headers@docker
    - traefik.http.middlewares.n8n-headers.SSLRedirect=true
    - traefik.http.middlewares.n8n-headers.STSSeconds=315360000
    - traefik.http.middlewares.n8n-headers.browserXSSFilter=true
    - traefik.http.middlewares.n8n-headers.contentTypeNosniff=true
    - traefik.http.middlewares.n8n-headers.forceSTSHeader=true
    - traefik.http.middlewares.n8n-headers.SSLHost=${TRAEFIK_DOMAIN}
    - traefik.http.middlewares.n8n-headers.STSIncludeSubdomains=true
    - traefik.http.middlewares.n8n-headers.STSPreload=true

  ollama:
    <<: *common
    image: ollama/ollama:${OLLAMA_VERSION}
    expose:
    - "11434"
    volumes:
    - ollama-data:/root/.ollama
    labels:
    - traefik.enable=true
    - traefik.http.routers.ollama.rule=Host(`ollama.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.ollama.entrypoints=websecure
    - traefik.http.routers.ollama.tls.certresolver=le-dns
    - traefik.http.routers.ollama.middlewares=auth@file

  openwebui:
    <<: *common
    image: ghcr.io/open-webui/open-webui:${OPENWEBUI_VERSION}
    expose:
    - "8080"
    labels:
    - traefik.enable=true
    - traefik.http.routers.webui.rule=Host(`chat.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.webui.entrypoints=websecure
    - traefik.http.routers.webui.tls.certresolver=le-dns
    - traefik.http.routers.webui.middlewares=auth@file
    - traefik.http.services.openwebui.loadbalancer.server.port=3000

  ############################
  #     DATA / RAG STACK     #
  ############################
  elasticsearch:
    <<: *common
    image: elasticsearch:${ES_VERSION}
    container_name: es-01
    volumes:
    - esdata01:/usr/share/elasticsearch/data
    expose:
    - "${ES_PORT}"
    environment:
    - node.name=es01
    - discovery.type=single-node
    - xpack.security.enabled=true
    - xpack.security.http.ssl.enabled=false
    - xpack.security.transport.ssl.enabled=false
    - ELASTIC_PASSWORD=${ES_PASSWORD}
    - bootstrap.memory_lock=false
    - cluster.routing.allocation.disk.watermark.low=5gb
    - cluster.routing.allocation.disk.watermark.high=3gb
    - cluster.routing.allocation.disk.watermark.flood_stage=2gb
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
      - CMD-SHELL
      - curl -s http://localhost:9200 >/dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 120

  infinity:
    <<: *common
    image: infiniflow/infinity:${INFINITY_VERSION}
    volumes:
    - infinity_data:/var/infinity
    - ./ragflow/infinity_conf.toml:/infinity_conf.toml:ro
    command:
    - -f
    - /infinity_conf.toml
    expose:
    - "${INFINITY_THRIFT_PORT}"
    - "${INFINITY_HTTP_PORT}"
    - "${INFINITY_PSQL_PORT}"
    ulimits:
      nofile: { soft: 500000, hard: 500000 }
    healthcheck:
      test: [ "CMD", "curl", "-s", "http://localhost:23820/admin/node/current" ]
      interval: 10s
      timeout: 10s
      retries: 120

  mysql:
    <<: *common
    image: mysql:${MYSQL_VERSION}
    command:
    - --max_connections=1000
    - --character-set-server=utf8mb4
    - --collation-server=utf8mb4_unicode_ci
    - --default-authentication-plugin=mysql_native_password
    - --tls_version=TLSv1.2,TLSv1.3
    - --init-file=/data/application/init.sql
    - --binlog_expire_logs_seconds=604800
    expose:
    - "${MYSQL_PORT}"
    volumes:
    - mysql_data:/var/lib/mysql
    - ./ragflow/init.sql:/data/application/init.sql:ro
    environment:
    - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-uroot", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    <<: *common
    restart: on-failure
    image: quay.io/minio/minio:${MINIO_VERSION}
    command:
    - server
    - --console-address
    - ":9001"
    - /data
    expose:
    - "${MINIO_PORT}"
    - "${MINIO_CONSOLE_PORT}"
    volumes:
    - minio_data:/data
    environment:
    - MINIO_ROOT_USER=${MINIO_ROOT_USER}
    - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    labels:
    - traefik.enable=true
    - traefik.http.routers.minio.rule=Host(`minio.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.minio.entrypoints=websecure
    - traefik.http.routers.minio.tls.certresolver=le-dns
    - traefik.http.routers.minio.middlewares=auth@file
    - traefik.http.services.portainer.loadbalancer.server.port=9001

  valkey:
    <<: *common
    image: valkey/valkey:${REDIS_VERSION}
    container_name: redis
    restart: on-failure
    command:
    - redis-server
    - --requirepass
    - ${REDIS_PASSWORD}
    - --maxmemory
    - 128mb
    - --maxmemory-policy
    - allkeys-lru
    expose:
    - "${REDIS_PORT}"
    volumes:
    - redis_data:/data

  ragflow:
    <<: *common
    image: infiniflow/ragflow:${RAGFLOW_VERSION}
    container_name: ragflow-server
    depends_on:
      elasticsearch: { condition: service_started }
      infinity: { condition: service_started }
      mysql: { condition: service_healthy }
    expose:
    - "${SVR_HTTP_PORT}"
    - "9382" # MCP port 
    volumes:
    - ${RAGFLOW_LOG_DIR}:/ragflow/logs
    - ${RAGFLOW_HISTORY_DIR}:/ragflow/history_data_agent
    - ./ragflow/service_conf.yaml.template:/ragflow/conf/service_conf.yaml.template:ro
    - ./ragflow/entrypoint.sh:/ragflow/entrypoint.sh:ro
    extra_hosts:
    - "host.docker.internal:host-gateway"
    restart: on-failure
    labels:
    - traefik.enable=true
    - traefik.http.routers.ragflow.rule=Host(`ragflow.${TRAEFIK_DOMAIN}`)
    - traefik.http.routers.ragflow.entrypoints=websecure
    - traefik.http.routers.ragflow.tls.certresolver=le-dns
    - traefik.http.routers.ragflow.middlewares=auth@file
    - traefik.http.services.ragflow.loadbalancer.server.port=80

############################
#         VOLUMES          #
############################
volumes:
  grafana-data:
  loki-data:
  prometheus-data:
  portainer-data:
  n8n-data:
  ollama-data:
  esdata01:
  infinity_data:
  mysql_data:
  minio_data:
  redis_data:
  ragflow-logs:
  ragflow-history:

    ############################
    #         NETWORKS         #
    ############################
networks:
  backend:
    driver: bridge
