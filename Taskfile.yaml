# Taskfile.yaml – unified compose path & DX helpers
version: "3"

vars:
  # ----- Docker Compose path (single source of truth) -----------------------
  STACK_COMPOSE: docker compose -f ansible/roles/pocket_lab/files/compose.yaml

  # ----- Python / Ansible virtual‑env ---------------------------------------
  VENV_DIR: .venv
  VENV_BIN: "{{ .VENV_DIR }}/bin"
  PYTHON: "{{ .VENV_BIN }}/python"
  ANSIBLE_PLAYBOOK_CMD: "{{ .VENV_BIN}}/ansible-playbook"

  # ----- Ansible playbooks / inventory --------------------------------------
  ANSIBLE_PLAYBOOK: ansible/site.yaml
  ANSIBLE_INVENTORY: ansible/inventory/hosts.yaml
  ANSIBLE_DETECT_PLAY: ansible/plays/00-detect-user.yaml
  ANSIBLE_BOOTSTRAP_PLAY: ansible/plays/10-bootstrap.yaml
  ANSIBLE_HARDEN_PLAY: ansible/plays/20-harden.yaml
  ANSIBLE_DEPLOY_PLAY: ansible/plays/30-deploy.yaml

# ---------------------------------------------------------------------------
# Helper tasks – `task --list` should read like a CLI reference
# ---------------------------------------------------------------------------
tasks:
  # ───────────────────────── ENV / tooling ────────────────────────────────
  venv:init:
    desc: "Create venv & install Ansible + collections"
    cmds:
    - test -d {{.VENV_DIR}} || python3 -m venv {{.VENV_DIR}}
    - "{{.PYTHON}} -m pip install --upgrade pip wheel"
    - "{{.PYTHON}} -m pip install ansible-core==2.16.* ruamel.yaml"
    - "{{.VENV_BIN}}/ansible-galaxy collection install -r ansible/requirements.yaml -p {{.VENV_DIR}}/ansible/collections"
    - "{{.VENV_BIN}}/ansible-galaxy role install -r ansible/requirements.yaml -p {{.VENV_DIR}}/ansible/roles"

  init-env:
    desc: "Create .env from template (manual compose)"
    cmds:
    - test -f .env || cp .env.template .env

  diff-env:
    desc: "Fail if .env.template & .env.j2 diverge"
    cmds:
    - python scripts/sync_env.py

  # ───────────────────────── Docker Compose DX ────────────────────────────
  compose-up:
    desc: "Start stack (unified compose path)"
    cmds:
    - task:init-env
    - "{{.STACK_COMPOSE}} pull"
    - "{{.STACK_COMPOSE}} up -d"

  compose-down:
    desc: "Stop & remove containers + volumes"
    cmds:
    - "{{.STACK_COMPOSE}} down -v --remove-orphans"

  compose-logs:
    desc: "Tail stack logs"
    cmds:
    - "{{.STACK_COMPOSE}} logs -f --tail=100"

  docker-restart:
    desc: "Restart a service – usage: task docker-restart -- <service>"
    cmds:
    - "{{.STACK_COMPOSE}} restart {{.CLI_ARGS}}"

  docker-prune:
    desc: "Docker system prune"
    cmds:
    - docker system prune -f

  # ───────────────────────── Ansible wrappers ─────────────────────────────
  ansible_detect:
    deps: [ venv:init ]
    cmds:
    - "{{.ANSIBLE_PLAYBOOK_CMD}} -i {{.ANSIBLE_INVENTORY}} {{.ANSIBLE_DETECT_PLAY}} {{.CLI_ARGS}}"

  ansible_bootstrap:
    deps: [ ansible_detect ]
    cmds:
    - "{{.ANSIBLE_PLAYBOOK_CMD}} -i {{.ANSIBLE_INVENTORY}} {{.ANSIBLE_BOOTSTRAP_PLAY}} {{.CLI_ARGS}}"

  ansible_harden:
    deps: [ ansible_detect ]
    cmds:
    - "{{.ANSIBLE_PLAYBOOK_CMD}} -i {{.ANSIBLE_INVENTORY}} {{.ANSIBLE_HARDEN_PLAY}} {{.CLI_ARGS}}"

  ansible_deploy:
    deps: [ ansible_detect ]
    cmds:
    - "{{.ANSIBLE_PLAYBOOK_CMD}} -i {{.ANSIBLE_INVENTORY}} {{.ANSIBLE_DEPLOY_PLAY}} {{.CLI_ARGS}}"

  ansible_full:
    deps: [ venv:init ]
    cmds:
    - "{{.ANSIBLE_PLAYBOOK_CMD}} -i {{.ANSIBLE_INVENTORY}} ansible/site.yaml {{.CLI_ARGS}}"

  ansible_check:
    deps: [ venv:init ]
    cmds:
    - "{{.ANSIBLE_PLAYBOOK_CMD}} -i {{.ANSIBLE_INVENTORY}} {{.ANSIBLE_PLAYBOOK}} --check {{.CLI_ARGS}}"
